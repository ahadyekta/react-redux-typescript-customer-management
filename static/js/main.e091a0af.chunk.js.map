{"version":3,"sources":["actions/customerActions.ts","constansts.ts","components/customers-table/index.tsx","components/pages/List/component.tsx","components/pages/List/index.ts","components/pages/Form/component.tsx","components/pages/Form/index.tsx","App.tsx","serviceWorker.ts","reducers/customerReducer.ts","Store.tsx","index.tsx"],"names":["CustomerActionTypes","LIST_URL","CustomerTable","customers","deleteCustomer","className","scope","map","customer","key","id","data-automation","firstName","lastName","DOB","style","marginBottom","to","onClick","Number","List","state","props","searchCustomer","e","preventDefault","query","currentTarget","value","filter","toLowerCase","indexOf","setState","prevProps","this","length","type","onChange","name","placeholder","React","mapDispatchToProps","dispatch","DELETE_CUSTOMER","connect","store","customerState","Component","Form","processFormSubmission","isEdit","editCustomer","match","params","createCustomer","history","push","handleInputChanges","onSubmit","htmlFor","required","defaultValue","withRouter","data","CREATE_CUSTOMER","EDIT_CUSTOMER","ownProps","find","App","basename","path","exact","component","Boolean","window","location","hostname","initialCustomerState","rootReducer","combineReducers","action","refinedCustomers","createStore","undefined","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e091a0af.chunk.js","sourcesContent":["// Import redux types\nimport { ActionCreator, Dispatch } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\n// Import Character Typing\nimport { ICustomer, ICustomerState } from '../reducers/customerReducer'\n\n// Create Action Constants\nexport enum CustomerActionTypes {\n    CREATE_CUSTOMER = 'CREATE_CUSTOMER',\n    EDIT_CUSTOMER = 'EDIT_CUSTOMER',\n    DELETE_CUSTOMER = 'DELETE_CUSTOMER',\n}\n\nexport interface ICustomerCreateAction {\n    type: CustomerActionTypes.CREATE_CUSTOMER\n    data: ICustomer\n}\n\nexport interface ICustomerEditAction {\n    type: CustomerActionTypes.EDIT_CUSTOMER\n    data: ICustomer\n    id: number\n}\n\nexport interface ICustomerDeleteAction {\n    type: CustomerActionTypes.DELETE_CUSTOMER\n    id: number\n}\n\n/* \nCombine the action types with a union (we assume there are more)\n*/\nexport type CustomerActions = ICustomerCreateAction | ICustomerEditAction | ICustomerDeleteAction\n\n/* Create Customer Action\n */\nexport const createCustomer: ActionCreator<ThunkAction<void, ICustomerState, null, ICustomerCreateAction>> = (\n    data: ICustomer,\n) => {\n    return (dispatch: Dispatch): void => {\n        dispatch({\n            data: data,\n            type: CustomerActionTypes.CREATE_CUSTOMER,\n        })\n    }\n}\n\n/* Edit Customer Action\n */\nexport const editCustomer: ActionCreator<ThunkAction<void, ICustomerState, null, ICustomerCreateAction>> = (\n    data: ICustomer,\n    id: number,\n) => {\n    return (dispatch: Dispatch): void => {\n        dispatch({\n            data: data,\n            id: id,\n            type: CustomerActionTypes.EDIT_CUSTOMER,\n        })\n    }\n}\n\n/* Delete Customer Action\n */\nexport const deleteCustomer: ActionCreator<ThunkAction<void, ICustomerState, null, ICustomerCreateAction>> = (\n    id: number,\n) => {\n    return (dispatch: Dispatch): void => {\n        dispatch({\n            id: id,\n            type: CustomerActionTypes.DELETE_CUSTOMER,\n        })\n    }\n}\n","/**\n * LABELS\n */\nexport const FIRSTNAME_LABEL = 'Firstname'\nexport const LASTNAME_LABEL = 'Lastname'\nexport const DOB_LABEL = 'Date Of Birth'\nexport const ACTION_LABEL = 'Actions'\nexport const EDIT_LABEL = 'EDIT'\nexport const DELETE_LABEL = 'DELETE'\nexport const NO_CUSTOMER_FOUND_LABEL = 'No customer found'\nexport const CREATE_LABEL = 'Create'\nexport const SEARCH_PLACEHOLDER = 'Search firstName or lastName...'\nexport const SUBMIT_LABEL = 'Submit'\nexport const BACK_LABEL = 'Back'\nexport const CANCEL_LABEL = 'Cancel'\nexport const FIRSTNAME_PLACEHOLDER = \"Customer's first name\"\nexport const LASTNAME_PLACEHOLDER = \"Customer's last name\"\nexport const DOB_PLACEHOLDER = '13/04/1955'\nexport const EDIT_CUSTOMER_LABEL = 'Edit customer'\nexport const CREATE_CUSTOMER_LABEL = 'Create customer'\n\n/**\n * URLS\n */\nexport const CREATE_URL = '/create'\nexport const LIST_URL = '/'\nexport const EDIT_URL = '/edit'\n","import React from 'react'\nimport { ICustomer } from '../../reducers/customerReducer'\nimport { Link } from 'react-router-dom'\nimport {\n    FIRSTNAME_LABEL,\n    LASTNAME_LABEL,\n    DOB_LABEL,\n    ACTION_LABEL,\n    EDIT_LABEL,\n    DELETE_LABEL,\n    EDIT_URL,\n} from '../../constansts'\n\ninterface IProps {\n    customers: ICustomer[]\n    deleteCustomer: (id: number | undefined) => void\n}\n\nconst CustomerTable: React.FC<IProps> = ({ customers, deleteCustomer }) => {\n    return (\n        <table className=\"table table-bordered\">\n            <thead className=\"thead-light\">\n                <tr>\n                    <th scope=\"col\">{FIRSTNAME_LABEL}</th>\n                    <th scope=\"col\">{LASTNAME_LABEL}</th>\n                    <th scope=\"col\">{DOB_LABEL}</th>\n                    <th scope=\"col\">{ACTION_LABEL}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {customers &&\n                    customers.map(customer => (\n                        <tr key={customer.id} data-automation=\"customer-row\">\n                            <td>{customer.firstName}</td>\n                            <td>{customer.lastName}</td>\n                            <td>{customer.DOB}</td>\n                            <td>\n                                <div className=\"d-flex justify-content-between align-items-center\">\n                                    <div className=\"btn-group\" style={{ marginBottom: '20px' }}>\n                                        <Link\n                                            to={`${EDIT_URL}/${customer.id}`}\n                                            className=\"btn btn-sm btn-outline-secondary\"\n                                        >\n                                            {EDIT_LABEL}{' '}\n                                        </Link>\n                                        <button\n                                            className=\"btn btn-sm btn-outline-secondary\"\n                                            onClick={(): void => {\n                                                deleteCustomer(Number(customer.id))\n                                            }}\n                                        >\n                                            {DELETE_LABEL}\n                                        </button>\n                                    </div>\n                                </div>\n                            </td>\n                        </tr>\n                    ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default CustomerTable\n","import * as React from 'react'\nimport { Link } from 'react-router-dom'\nimport { ICustomer } from '../../../reducers/customerReducer'\nimport CustomerTable from '../../customers-table'\nimport { NO_CUSTOMER_FOUND_LABEL, CREATE_LABEL, SEARCH_PLACEHOLDER, CREATE_URL } from '../../../constansts'\n\ninterface IProps {\n    customers: ICustomer[]\n    deleteCustomer: (id: number | undefined) => void\n}\n\ninterface IState {\n    customers: ICustomer[]\n}\n\nclass List extends React.Component<IProps, IState> {\n    state = {\n        customers: this.props.customers,\n    }\n    deleteCustomer = (id: number | undefined): void => {\n        this.props.deleteCustomer(id)\n    }\n\n    componentDidUpdate(prevProps: IProps): void {\n        if (prevProps.customers !== this.props.customers) {\n            this.setState({ customers: this.props.customers })\n        }\n    }\n    public searchCustomer = (e: React.FormEvent<HTMLInputElement>): void => {\n        e.preventDefault()\n        const query = e.currentTarget.value\n        if (e.currentTarget.value) {\n            const customers = this.props.customers.filter(\n                (customer: ICustomer) =>\n                    customer.firstName.toLowerCase().indexOf(query.toLowerCase()) > -1 ||\n                    customer.lastName.toLowerCase().indexOf(query.toLowerCase()) > -1,\n            )\n            this.setState({ customers: customers })\n        } else {\n            this.setState({ customers: this.props.customers })\n        }\n    }\n    public render(): JSX.Element {\n        const customers = this.state.customers\n        return (\n            <div>\n                {customers.length === 0 && (\n                    <div className=\"text-center\">\n                        <h2>{NO_CUSTOMER_FOUND_LABEL}</h2>\n                    </div>\n                )}\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-12 search\">\n                            <input\n                                type=\"text\"\n                                id=\"search\"\n                                onChange={(e): void => {\n                                    this.searchCustomer(e)\n                                }}\n                                name=\"search\"\n                                className=\"form-control\"\n                                placeholder={SEARCH_PLACEHOLDER}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <CustomerTable customers={this.state.customers} deleteCustomer={this.deleteCustomer} />\n                    </div>\n                    <div className=\"row\">\n                        <Link to={CREATE_URL} className=\"btn btn-primary\">\n                            {' '}\n                            {CREATE_LABEL}{' '}\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default List\n","import { IAppState } from '../../../Store'\nimport { connect } from 'react-redux'\nimport { deleteCustomer } from '../../../actions/customerActions'\nimport Component from './component'\nimport { ICustomerState } from '../../../reducers/customerReducer'\n\nconst mapStateToProps = (store: IAppState): ICustomerState => ({\n    customers: store.customerState.customers,\n})\n\nconst mapDispatchToProps = {\n    deleteCustomer,\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Component)\n","import * as React from 'react'\nimport { RouteComponentProps, withRouter, Link } from 'react-router-dom'\nimport { ICustomer } from '../../../reducers/customerReducer'\nimport {\n    LIST_URL,\n    FIRSTNAME_LABEL,\n    LASTNAME_LABEL,\n    DOB_LABEL,\n    SUBMIT_LABEL,\n    NO_CUSTOMER_FOUND_LABEL,\n    BACK_LABEL,\n    CANCEL_LABEL,\n    FIRSTNAME_PLACEHOLDER,\n    LASTNAME_PLACEHOLDER,\n    DOB_PLACEHOLDER,\n    EDIT_CUSTOMER_LABEL,\n    CREATE_CUSTOMER_LABEL,\n} from '../../../constansts'\n\nexport interface IState {\n    [key: string]: string\n    firstName: string\n    lastName: string\n    DOB: string\n}\n\ninterface IRoute {\n    id: string | undefined\n}\nexport interface IProps extends RouteComponentProps<IRoute> {\n    createCustomer: (data: ICustomer) => void\n    editCustomer: (data: ICustomer, id: number) => void\n    customer: ICustomer | undefined\n    isEdit: boolean\n}\nclass Form extends React.Component<IProps, IState> {\n    state = {\n        firstName: (this.props.customer && this.props.customer.firstName) || '',\n        lastName: (this.props.customer && this.props.customer.lastName) || '',\n        DOB: (this.props.customer && this.props.customer.DOB) || '',\n    }\n\n    private processFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault()\n        if (this.props.isEdit) {\n            //edit\n            this.props.editCustomer(this.state, Number(this.props.match.params.id))\n        } else {\n            //create\n            this.props.createCustomer(this.state)\n        }\n        this.props.history.push(LIST_URL)\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>): void => {\n        e.preventDefault()\n        this.setState({\n            [e.currentTarget.name]: e.currentTarget.value,\n        })\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div>\n                <div className={'col-md-12 form-wrapper'}>\n                    <h2>{`${this.props.isEdit ? EDIT_CUSTOMER_LABEL : CREATE_CUSTOMER_LABEL}`}</h2>\n                    {!this.props.customer && this.props.isEdit && (\n                        <div>\n                            <p>{NO_CUSTOMER_FOUND_LABEL}</p>\n                            <p>\n                                <Link to={LIST_URL} className=\"btn btn-outline-secondary mr-3\">\n                                    {BACK_LABEL}\n                                </Link>\n                            </p>\n                        </div>\n                    )}\n                    {(!this.props.isEdit || this.props.customer) && (\n                        <form id={'post-form'} onSubmit={this.processFormSubmission}>\n                            <div className=\"form-group col-md-12\">\n                                <label htmlFor=\"firstName\"> {FIRSTNAME_LABEL} </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"firstName\"\n                                    required={true}\n                                    onChange={(e): void => {\n                                        this.handleInputChanges(e)\n                                    }}\n                                    name=\"firstName\"\n                                    className=\"form-control\"\n                                    placeholder={FIRSTNAME_PLACEHOLDER}\n                                    defaultValue={this.state.firstName}\n                                />\n                            </div>\n\n                            <div className=\"form-group col-md-12\">\n                                <label htmlFor=\"lastName\"> {LASTNAME_LABEL} </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"lastName\"\n                                    required={true}\n                                    onChange={(e): void => {\n                                        this.handleInputChanges(e)\n                                    }}\n                                    name=\"lastName\"\n                                    className=\"form-control\"\n                                    placeholder={LASTNAME_PLACEHOLDER}\n                                    defaultValue={this.state.lastName}\n                                />\n                            </div>\n\n                            <div className=\"form-group col-md-12\">\n                                <label htmlFor=\"DOB\"> {DOB_LABEL} </label>\n                                <input\n                                    type=\"text\"\n                                    id=\"DOB\"\n                                    required={true}\n                                    onChange={(e): void => {\n                                        this.handleInputChanges(e)\n                                    }}\n                                    name=\"DOB\"\n                                    className=\"form-control\"\n                                    placeholder={DOB_PLACEHOLDER}\n                                    defaultValue={this.state.DOB}\n                                />\n                            </div>\n\n                            <div className=\"form-group col-md-6 btn-toolbar pull-right\">\n                                <button className=\"btn btn-success mr-3\" type=\"submit\" id=\"submit\">\n                                    {SUBMIT_LABEL}\n                                </button>\n                                <Link to={LIST_URL} className=\"btn btn-outline-secondary mr-3\">\n                                    {CANCEL_LABEL}\n                                </Link>\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Form)\n","import Component from './component'\nimport { IAppState } from '../../../Store'\nimport { connect } from 'react-redux'\nimport { createCustomer, editCustomer } from '../../../actions/customerActions'\nimport { ICustomer } from '../../../reducers/customerReducer'\n\ninterface StateProps {\n    customer: ICustomer | undefined\n    isEdit: boolean\n}\n\nconst mapStateToProps = (store: IAppState, ownProps: { match: { params: { id: string | undefined } } }): StateProps => {\n    return {\n        customer: store.customerState.customers.find(({ id }) => id === Number(ownProps.match.params.id)),\n        isEdit: !!ownProps.match.params.id,\n    }\n}\n\nconst mapDispatchToProps = {\n    createCustomer: createCustomer,\n    editCustomer: editCustomer,\n}\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Component)\n","import React from 'react'\nimport { Route, HashRouter } from 'react-router-dom'\nimport List from './components/pages/List/.'\nimport Form from './components/pages/Form/.'\nimport { CREATE_URL, LIST_URL, EDIT_URL } from './constansts'\n\nconst App: React.FC = () => {\n    return (\n        <HashRouter basename=\"/react-redux-typescript-customer-management\">\n            <Route path={LIST_URL} exact component={List} />\n            <Route path={CREATE_URL} exact component={Form} />\n            <Route path={`${EDIT_URL}/:id`} exact component={Form} />\n        </HashRouter>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import Reducer type\nimport { Reducer } from 'redux'\nimport { CustomerActionTypes, CustomerActions } from '../actions/customerActions'\nimport customerData from '../data/customerData.json'\n\n// Define the Character type\nexport interface ICustomer {\n    id?: number\n    firstName: string\n    lastName: string\n    DOB: string\n}\n\n// Define the Character State\nexport interface ICustomerState {\n    readonly customers: ICustomer[]\n}\n\n// Define the initial state\nconst initialCustomerState: ICustomerState = {\n    customers: customerData.customers,\n}\n\nexport const customerReducer: Reducer<ICustomerState, CustomerActions> = (state = initialCustomerState, action) => {\n    switch (action.type) {\n        case CustomerActionTypes.CREATE_CUSTOMER: {\n            const id =\n                state.customers.length > 0\n                    ? state.customers[state.customers.length - 1] &&\n                      state.customers[state.customers.length - 1].id &&\n                      Number(state.customers[state.customers.length - 1].id) + 1\n                    : 1 //last customer id\n            return {\n                ...state,\n                customers: [...state.customers, { ...action.data, id }],\n            }\n        }\n        case CustomerActionTypes.DELETE_CUSTOMER: {\n            const refinedCustomers = state.customers.filter(({ id }: ICustomer) => id !== action.id)\n            return {\n                ...state,\n                customers: refinedCustomers,\n            }\n        }\n        case CustomerActionTypes.EDIT_CUSTOMER: {\n            const refinedCustomers = state.customers.map((customer: ICustomer) => {\n                if (customer.id === action.id) {\n                    return { ...action.data, id: action.id }\n                } else {\n                    return { ...customer }\n                }\n            })\n            return {\n                ...state,\n                customers: refinedCustomers,\n            }\n        }\n        default:\n            return state\n    }\n}\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport thunk from 'redux-thunk'\nimport { customerReducer, ICustomerState } from './reducers/customerReducer'\n\n// Create an interface for the application state\nexport interface IAppState {\n    customerState: ICustomerState\n}\n\n// Create the root reducer\nconst rootReducer = combineReducers<IAppState>({\n    customerState: customerReducer,\n})\n\n// Create a configure store function of type `IAppState`\nexport default function configureStore(): Store<IAppState> {\n    const store = createStore(rootReducer, undefined, applyMiddleware(thunk))\n    return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { Store } from 'redux'\nimport configureStore, { IAppState } from './Store'\n\ninterface IProps {\n    store: Store<IAppState>\n}\n\nconst Root: React.FC<IProps> = props => {\n    return (\n        <Provider store={props.store}>\n            <App />\n        </Provider>\n    )\n}\n\nconst store = configureStore()\nReactDOM.render(\n    <BrowserRouter>\n        <Root store={store} />\n    </BrowserRouter>,\n    document.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}